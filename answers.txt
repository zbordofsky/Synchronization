Questions 1.1
	1. It takes that many threads because 
	2. When there are significantly less threads and iterations, it rarely fails because there
		is less of a chance of overlap, or things happening at the same time. With more operations,
		there is a greater chance that threads can interfere with each other and add or subtract at 
		the same time, causing the race condition. 

Questions 1.2
	1. Average cost per operation goes down with increasing the number iteratinos because the overhead
		is spread out amongst all the operations, thus reducing the time for each one. With more operations, 
		the time spent in context switches, or other overhead operations is relatively reduced when compared 
		to the other actions occuring. 
	2. We know the correct cost by looking at 
	3. The yielding option slows things down so much because it does not always release the process to go to the 
		next thread right away. Sometimes there is a delay in running the threads during yield, whcih causes slower 
		run times. 
	4. You cannot get accurate run times while using yield when things fail. This is because of the delay when the process
		changes between threads. 

Questions 1.3
	1. When there is a low number of threads, there are less calls to the different locks, so the difference in their 
		performance is reduced so that it is harder to observe. In these lower thread count cases, the performances are
		very similar. 
	2. The operations slow down with increased number of threads because all of the threads interupt each other and cause the 
		others to have to wait longer to do their work. There is also an increase in the number of lock operations that must
		be done. These two factors cause most of the slow down in performance. 
	3. Spin locks are best used in situations where the data is not often changed, so the lock is held for a long time. In our 
		system, the lock is constantly being changed, and the value is constantly being changed, causing the heavy operations
		that change it to be run. 

Questions 2.1
	1. 

Questions 2.2
	1. 

Questions 2.3 
	1. 
	2. 

Part 3
	1. The mutex needs to be held in order to put something to sleep because a thread needs to be able to do something
		before being put to sleep. If the the thread did not hold the mutex prior to calling the function, then that
		means that the fuction was called while the thread was already waiting. 
	2. The waiting thread needs the ability to write/do its work so that the other threads don't have to wait longer than
		necessary. By giving up the mutex, the sleeping thread gives the waiting threads a chance to run and do their 
		operations. 
	3. The mutex needs to be reacquired so that the thread that is woken up has the ability to do work. There would be no
		point in waking up a thread if it just had to continue waiting, so the mutex needs to be reacquired in order 
		to wake up a thread. 
	4. This needs to be done inside of the function instead of outside of it because another waiting thread may steal
		mutex before the thread that was sleeping has a chance to grab it. Then the thread is woken up just be waiting
		instead of getting to do its work. 
	5. The act of modifying a mutex is an instruction that the kernel does. This means that a user-mode based implementation
		would not work because a user could not tell the kernel what to do like that. Instead, this must be implemented 
		using a system call. 